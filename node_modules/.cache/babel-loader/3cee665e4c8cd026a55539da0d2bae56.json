{"ast":null,"code":"import _slicedToArray from \"/Users/xinshuangzhai/Desktop/Spring2019/CSCI4230/MessageSystem/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"/Users/xinshuangzhai/Desktop/Spring2019/CSCI4230/MessageSystem/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/Users/xinshuangzhai/Desktop/Spring2019/CSCI4230/MessageSystem/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/xinshuangzhai/Desktop/Spring2019/CSCI4230/MessageSystem/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/xinshuangzhai/Desktop/Spring2019/CSCI4230/MessageSystem/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/xinshuangzhai/Desktop/Spring2019/CSCI4230/MessageSystem/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/xinshuangzhai/Desktop/Spring2019/CSCI4230/MessageSystem/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/xinshuangzhai/Desktop/Spring2019/CSCI4230/MessageSystem/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/xinshuangzhai/Desktop/Spring2019/CSCI4230/MessageSystem/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { version } from '../package.json';\nimport './index.css';\nimport { UserHeader } from './components/UserHeader';\nimport { UserList } from './components/UserList';\nimport { MessageList } from './components/MessageList';\nimport { CreateMessageForm } from './components/CreateMessageForm';\nimport { RoomList } from './components/RoomList';\nimport { RoomHeader } from './components/RoomHeader';\nimport { CreateRoomForm } from './components/CreateRoomForm';\nimport { WelcomeScreen } from './components/WelcomeScreen';\nimport { JoinRoomScreen } from './components/JoinRoomScreen';\nimport ChatManager from './chatkit'; // --------------------------------------\n// Application\n// --------------------------------------\n\nvar View =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(View, _React$Component);\n\n  function View() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, View);\n\n    for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {\n      _args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(View)).call.apply(_getPrototypeOf2, [this].concat(_args)));\n    _this.state = {\n      user: {},\n      room: {},\n      messages: {},\n      sidebarOpen: false,\n      userListOpen: window.innerWidth > 1000\n    };\n    _this.actions = {\n      // --------------------------------------\n      // UI\n      // --------------------------------------\n      setSidebar: function setSidebar(sidebarOpen) {\n        return _this.setState({\n          sidebarOpen: sidebarOpen\n        });\n      },\n      setUserList: function setUserList(userListOpen) {\n        return _this.setState({\n          userListOpen: userListOpen\n        });\n      },\n      // --------------------------------------\n      // User\n      // --------------------------------------\n      setUser: function setUser(user) {\n        return _this.setState({\n          user: user\n        });\n      },\n      // --------------------------------------\n      // Room\n      // --------------------------------------\n      setRoom: function setRoom(room) {\n        _this.setState({\n          room: room,\n          sidebarOpen: false\n        });\n\n        _this.actions.scrollToEnd();\n      },\n      removeRoom: function removeRoom(room) {\n        return _this.setState({\n          room: {}\n        });\n      },\n      joinRoom: function joinRoom(room) {\n        _this.actions.setRoom(room);\n\n        _this.actions.subscribeToRoom(room);\n\n        _this.state.messages[room.id] && _this.actions.setCursor(room.id, Object.keys(_this.state.messages[room.id]).pop());\n      },\n      subscribeToRoom: function subscribeToRoom(room) {\n        return !_this.state.user.roomSubscriptions[room.id] && _this.state.user.subscribeToRoom({\n          roomId: room.id,\n          hooks: {\n            onMessage: _this.actions.addMessage\n          }\n        });\n      },\n      createRoom: function createRoom(options) {\n        return _this.state.user.createRoom(options).then(_this.actions.joinRoom);\n      },\n      createConvo: function createConvo(options) {\n        if (options.user.id !== _this.state.user.id) {\n          var exists = _this.state.user.rooms.find(function (x) {\n            return x.name === options.user.id + _this.state.user.id || x.name === _this.state.user.id + options.user.id;\n          });\n\n          exists ? _this.actions.joinRoom(exists) : _this.actions.createRoom({\n            name: _this.state.user.id + options.user.id,\n            addUserIds: [options.user.id],\n            private: true\n          });\n        }\n      },\n      addUserToRoom: function addUserToRoom(_ref) {\n        var userId = _ref.userId,\n            _ref$roomId = _ref.roomId,\n            roomId = _ref$roomId === void 0 ? _this.state.room.id : _ref$roomId;\n        return _this.state.user.addUserToRoom({\n          userId: userId,\n          roomId: roomId\n        }).then(_this.actions.setRoom);\n      },\n      removeUserFromRoom: function removeUserFromRoom(_ref2) {\n        var userId = _ref2.userId,\n            _ref2$roomId = _ref2.roomId,\n            roomId = _ref2$roomId === void 0 ? _this.state.room.id : _ref2$roomId;\n        return userId === _this.state.user.id ? _this.state.user.leaveRoom({\n          roomId: roomId\n        }) : _this.state.user.removeUserFromRoom({\n          userId: userId,\n          roomId: roomId\n        }).then(_this.actions.setRoom);\n      },\n      // --------------------------------------\n      // Cursors\n      // --------------------------------------\n      setCursor: function setCursor(roomId, position) {\n        return _this.state.user.setReadCursor({\n          roomId: roomId,\n          position: parseInt(position)\n        }).then(function (x) {\n          return _this.forceUpdate();\n        });\n      },\n      // --------------------------------------\n      // Messages\n      // --------------------------------------\n      addMessage: function addMessage(payload) {\n        var roomId = payload.room.id;\n        var messageId = payload.id; // Update local message cache with new message\n\n        _this.setState(function (prevState) {\n          return {\n            messages: _objectSpread({}, prevState.messages, _defineProperty({}, roomId, _objectSpread({}, prevState.messages[roomId], _defineProperty({}, messageId, payload))))\n          };\n        }); // Update cursor if the message was read\n\n\n        if (roomId === _this.state.room.id) {\n          var cursor = _this.state.user.readCursor({\n            roomId: roomId\n          }) || {};\n          var cursorPosition = cursor.position || 0;\n          cursorPosition < messageId && _this.actions.setCursor(roomId, messageId);\n\n          _this.actions.scrollToEnd();\n        } // Send notification\n\n\n        _this.actions.showNotification(payload);\n      },\n      runCommand: function runCommand(command) {\n        var commands = {\n          invite: function invite(_ref3) {\n            var _ref4 = _slicedToArray(_ref3, 1),\n                userId = _ref4[0];\n\n            return _this.actions.addUserToRoom({\n              userId: userId\n            });\n          },\n          remove: function remove(_ref5) {\n            var _ref6 = _slicedToArray(_ref5, 1),\n                userId = _ref6[0];\n\n            return _this.actions.removeUserFromRoom({\n              userId: userId\n            });\n          },\n          leave: function leave(_ref7) {\n            var _ref8 = _slicedToArray(_ref7, 1),\n                userId = _ref8[0];\n\n            return _this.actions.removeUserFromRoom({\n              userId: _this.state.user.id\n            });\n          }\n        };\n        var name = command.split(' ')[0];\n        var args = command.split(' ').slice(1);\n        var exec = commands[name];\n        exec && exec(args).catch(console.log);\n      },\n      scrollToEnd: function scrollToEnd(e) {\n        return setTimeout(function () {\n          var elem = document.querySelector('#messages');\n          elem && (elem.scrollTop = 100000);\n        }, 0);\n      },\n      // --------------------------------------\n      // Presence\n      // --------------------------------------\n      setUserPresence: function setUserPresence() {\n        return _this.forceUpdate();\n      },\n      // --------------------------------------\n      // Notifications\n      // --------------------------------------\n      showNotification: function showNotification(message) {\n        if ('Notification' in window && _this.state.user.id && _this.state.user.id !== message.senderId && document.visibilityState === 'hidden') {\n          var notification = new Notification(\"New Message from \".concat(message.sender.id), {\n            body: message.text,\n            icon: message.sender.avatarURL\n          });\n          notification.addEventListener('click', function (e) {\n            _this.actions.joinRoom(message.room);\n\n            window.focus();\n          });\n        }\n      }\n    };\n    return _this;\n  }\n\n  _createClass(View, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      'Notification' in window && Notification.requestPermission();\n      existingUser ? ChatManager(this, JSON.parse(existingUser)) : fetch('https://chatkit-demo-server.herokuapp.com/auth', {\n        method: 'POST',\n        body: JSON.stringify({\n          code: authCode\n        })\n      }).then(function (res) {\n        return res.json();\n      }).then(function (user) {\n        user.version = version;\n        window.localStorage.setItem('chatkit-user', JSON.stringify(user));\n        window.history.replaceState(null, null, window.location.pathname);\n        ChatManager(_this2, user);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          user = _this$state.user,\n          room = _this$state.room,\n          messages = _this$state.messages,\n          sidebarOpen = _this$state.sidebarOpen,\n          userListOpen = _this$state.userListOpen;\n      var _this$actions = this.actions,\n          createRoom = _this$actions.createRoom,\n          createConvo = _this$actions.createConvo,\n          removeUserFromRoom = _this$actions.removeUserFromRoom;\n      return React.createElement(\"main\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221\n        },\n        __self: this\n      }, React.createElement(\"aside\", {\n        \"data-open\": sidebarOpen,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222\n        },\n        __self: this\n      }, React.createElement(UserHeader, {\n        user: user,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223\n        },\n        __self: this\n      }), React.createElement(RoomList, {\n        user: user,\n        rooms: user.rooms,\n        messages: messages,\n        current: room,\n        actions: this.actions,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224\n        },\n        __self: this\n      }), user.id && React.createElement(CreateRoomForm, {\n        submit: createRoom,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231\n        },\n        __self: this\n      })), React.createElement(\"section\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233\n        },\n        __self: this\n      }, React.createElement(RoomHeader, {\n        state: this.state,\n        actions: this.actions,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234\n        },\n        __self: this\n      }), room.id ? React.createElement(\"row-\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 236\n        },\n        __self: this\n      }, React.createElement(\"col-\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237\n        },\n        __self: this\n      }, React.createElement(MessageList, {\n        user: user,\n        messages: messages[room.id],\n        createConvo: createConvo,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238\n        },\n        __self: this\n      }), React.createElement(CreateMessageForm, {\n        state: this.state,\n        actions: this.actions,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 243\n        },\n        __self: this\n      })), userListOpen && React.createElement(UserList, {\n        room: room,\n        current: user.id,\n        createConvo: createConvo,\n        removeUser: removeUserFromRoom,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246\n        },\n        __self: this\n      })) : user.id ? React.createElement(JoinRoomScreen, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 255\n        },\n        __self: this\n      }) : React.createElement(WelcomeScreen, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 257\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return View;\n}(React.Component); // --------------------------------------\n// Authentication\n// --------------------------------------\n\n\nwindow.localStorage.getItem('chatkit-user') && !window.localStorage.getItem('chatkit-user').match(version) && window.localStorage.clear();\nvar params = new URLSearchParams(window.location.search.slice(1));\nvar authCode = params.get('code');\nvar existingUser = window.localStorage.getItem('chatkit-user');\n\nvar githubAuthRedirect = function githubAuthRedirect() {\n  var client = '20cdd317000f92af12fe';\n  var url = 'https://github.com/login/oauth/authorize';\n  var server = 'https://chatkit-demo-server.herokuapp.com';\n  var redirect = \"\".concat(server, \"/success?url=\").concat(window.location.href.split('?')[0]);\n  window.location = \"\".concat(url, \"?scope=user:email&client_id=\").concat(client, \"&redirect_uri=\").concat(redirect);\n};\n\n!existingUser && !authCode ? githubAuthRedirect() : ReactDOM.render(React.createElement(View, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 287\n  },\n  __self: this\n}), document.querySelector('#root'));","map":{"version":3,"sources":["/Users/xinshuangzhai/Desktop/Spring2019/CSCI4230/MessageSystem/src/index.js"],"names":["React","ReactDOM","version","UserHeader","UserList","MessageList","CreateMessageForm","RoomList","RoomHeader","CreateRoomForm","WelcomeScreen","JoinRoomScreen","ChatManager","View","state","user","room","messages","sidebarOpen","userListOpen","window","innerWidth","actions","setSidebar","setState","setUserList","setUser","setRoom","scrollToEnd","removeRoom","joinRoom","subscribeToRoom","id","setCursor","Object","keys","pop","roomSubscriptions","roomId","hooks","onMessage","addMessage","createRoom","options","then","createConvo","exists","rooms","find","x","name","addUserIds","private","addUserToRoom","userId","removeUserFromRoom","leaveRoom","position","setReadCursor","parseInt","forceUpdate","payload","messageId","prevState","cursor","readCursor","cursorPosition","showNotification","runCommand","command","commands","invite","remove","leave","split","args","slice","exec","catch","console","log","e","setTimeout","elem","document","querySelector","scrollTop","setUserPresence","message","senderId","visibilityState","notification","Notification","sender","body","text","icon","avatarURL","addEventListener","focus","requestPermission","existingUser","JSON","parse","fetch","method","stringify","code","authCode","res","json","localStorage","setItem","history","replaceState","location","pathname","Component","getItem","match","clear","params","URLSearchParams","search","get","githubAuthRedirect","client","url","server","redirect","href","render"],"mappings":"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","sourcesContent":["import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { version } from '../package.json'\nimport './index.css'\n\nimport { UserHeader } from './components/UserHeader'\nimport { UserList } from './components/UserList'\nimport { MessageList } from './components/MessageList'\nimport { CreateMessageForm } from './components/CreateMessageForm'\nimport { RoomList } from './components/RoomList'\nimport { RoomHeader } from './components/RoomHeader'\nimport { CreateRoomForm } from './components/CreateRoomForm'\nimport { WelcomeScreen } from './components/WelcomeScreen'\nimport { JoinRoomScreen } from './components/JoinRoomScreen'\n\nimport ChatManager from './chatkit'\n\n// --------------------------------------\n// Application\n// --------------------------------------\n\nclass View extends React.Component {\n  state = {\n    user: {},\n    room: {},\n    messages: {},\n    sidebarOpen: false,\n    userListOpen: window.innerWidth > 1000,\n  }\n\n  actions = {\n    // --------------------------------------\n    // UI\n    // --------------------------------------\n\n    setSidebar: sidebarOpen => this.setState({ sidebarOpen }),\n    setUserList: userListOpen => this.setState({ userListOpen }),\n\n    // --------------------------------------\n    // User\n    // --------------------------------------\n\n    setUser: user => this.setState({ user }),\n\n    // --------------------------------------\n    // Room\n    // --------------------------------------\n\n    setRoom: room => {\n      this.setState({ room, sidebarOpen: false })\n      this.actions.scrollToEnd()\n    },\n\n    removeRoom: room => this.setState({ room: {} }),\n\n    joinRoom: room => {\n      this.actions.setRoom(room)\n      this.actions.subscribeToRoom(room)\n      this.state.messages[room.id] &&\n        this.actions.setCursor(\n          room.id,\n          Object.keys(this.state.messages[room.id]).pop()\n        )\n    },\n\n    subscribeToRoom: room =>\n      !this.state.user.roomSubscriptions[room.id] &&\n      this.state.user.subscribeToRoom({\n        roomId: room.id,\n        hooks: { onMessage: this.actions.addMessage },\n      }),\n\n    createRoom: options =>\n      this.state.user.createRoom(options).then(this.actions.joinRoom),\n\n    createConvo: options => {\n      if (options.user.id !== this.state.user.id) {\n        const exists = this.state.user.rooms.find(\n          x =>\n            x.name === options.user.id + this.state.user.id ||\n            x.name === this.state.user.id + options.user.id\n        )\n        exists\n          ? this.actions.joinRoom(exists)\n          : this.actions.createRoom({\n              name: this.state.user.id + options.user.id,\n              addUserIds: [options.user.id],\n              private: true,\n            })\n      }\n    },\n\n    addUserToRoom: ({ userId, roomId = this.state.room.id }) =>\n      this.state.user\n        .addUserToRoom({ userId, roomId })\n        .then(this.actions.setRoom),\n\n    removeUserFromRoom: ({ userId, roomId = this.state.room.id }) =>\n      userId === this.state.user.id\n        ? this.state.user.leaveRoom({ roomId })\n        : this.state.user\n            .removeUserFromRoom({ userId, roomId })\n            .then(this.actions.setRoom),\n\n    // --------------------------------------\n    // Cursors\n    // --------------------------------------\n\n    setCursor: (roomId, position) =>\n      this.state.user\n        .setReadCursor({ roomId, position: parseInt(position) })\n        .then(x => this.forceUpdate()),\n\n    // --------------------------------------\n    // Messages\n    // --------------------------------------\n\n    addMessage: payload => {\n      const roomId = payload.room.id\n      const messageId = payload.id\n      // Update local message cache with new message\n      this.setState(prevState => ({\n        messages: {\n          ...prevState.messages,\n          [roomId]: {\n            ...prevState.messages[roomId],\n            [messageId]: payload\n          }\n        }\n      }))\n      // Update cursor if the message was read\n      if (roomId === this.state.room.id) {\n        const cursor = this.state.user.readCursor({ roomId }) || {}\n        const cursorPosition = cursor.position || 0\n        cursorPosition < messageId && this.actions.setCursor(roomId, messageId)\n        this.actions.scrollToEnd()\n      }\n      // Send notification\n      this.actions.showNotification(payload)\n    },\n\n    runCommand: command => {\n      const commands = {\n        invite: ([userId]) => this.actions.addUserToRoom({ userId }),\n        remove: ([userId]) => this.actions.removeUserFromRoom({ userId }),\n        leave: ([userId]) =>\n          this.actions.removeUserFromRoom({ userId: this.state.user.id }),\n      }\n      const name = command.split(' ')[0]\n      const args = command.split(' ').slice(1)\n      const exec = commands[name]\n      exec && exec(args).catch(console.log)\n    },\n\n    scrollToEnd: e =>\n      setTimeout(() => {\n        const elem = document.querySelector('#messages')\n        elem && (elem.scrollTop = 100000)\n      }, 0),\n\n    // --------------------------------------\n    // Presence\n    // --------------------------------------\n\n    setUserPresence: () => this.forceUpdate(),\n\n    // --------------------------------------\n    // Notifications\n    // --------------------------------------\n\n    showNotification: message => {\n      if (\n        'Notification' in window &&\n        this.state.user.id &&\n        this.state.user.id !== message.senderId &&\n        document.visibilityState === 'hidden'\n      ) {\n        const notification = new Notification(\n          `New Message from ${message.sender.id}`,\n          {\n            body: message.text,\n            icon: message.sender.avatarURL,\n          }\n        )\n        notification.addEventListener('click', e => {\n          this.actions.joinRoom(message.room)\n          window.focus()\n        })\n      }\n    },\n  }\n\n  componentDidMount() {\n    'Notification' in window && Notification.requestPermission()\n    existingUser\n      ? ChatManager(this, JSON.parse(existingUser))\n      : fetch('https://chatkit-demo-server.herokuapp.com/auth', {\n          method: 'POST',\n          body: JSON.stringify({ code: authCode }),\n        })\n          .then(res => res.json())\n          .then(user => {\n            user.version = version\n            window.localStorage.setItem('chatkit-user', JSON.stringify(user))\n            window.history.replaceState(null, null, window.location.pathname)\n            ChatManager(this, user)\n          })\n  }\n\n  render() {\n    const {\n      user,\n      room,\n      messages,\n      sidebarOpen,\n      userListOpen,\n    } = this.state\n    const { createRoom, createConvo, removeUserFromRoom } = this.actions\n\n    return (\n      <main>\n        <aside data-open={sidebarOpen}>\n          <UserHeader user={user} />\n          <RoomList\n            user={user}\n            rooms={user.rooms}\n            messages={messages}\n            current={room}\n            actions={this.actions}\n          />\n          {user.id && <CreateRoomForm submit={createRoom} />}\n        </aside>\n        <section>\n          <RoomHeader state={this.state} actions={this.actions} />\n          {room.id ? (\n            <row->\n              <col->\n                <MessageList\n                  user={user}\n                  messages={messages[room.id]}\n                  createConvo={createConvo}\n                />\n                <CreateMessageForm state={this.state} actions={this.actions} />\n              </col->\n              {userListOpen && (\n                <UserList\n                  room={room}\n                  current={user.id}\n                  createConvo={createConvo}\n                  removeUser={removeUserFromRoom}\n                />\n              )}\n            </row->\n          ) : user.id ? (\n            <JoinRoomScreen />\n          ) : (\n            <WelcomeScreen />\n          )}\n        </section>\n      </main>\n    )\n  }\n}\n\n// --------------------------------------\n// Authentication\n// --------------------------------------\n\nwindow.localStorage.getItem('chatkit-user') &&\n  !window.localStorage.getItem('chatkit-user').match(version) &&\n  window.localStorage.clear()\n\nconst params = new URLSearchParams(window.location.search.slice(1))\nconst authCode = params.get('code')\nconst existingUser = window.localStorage.getItem('chatkit-user')\n\nconst githubAuthRedirect = () => {\n  const client = '20cdd317000f92af12fe'\n  const url = 'https://github.com/login/oauth/authorize'\n  const server = 'https://chatkit-demo-server.herokuapp.com'\n  const redirect = `${server}/success?url=${window.location.href.split('?')[0]}`\n  window.location = `${url}?scope=user:email&client_id=${client}&redirect_uri=${redirect}`\n}\n\n!existingUser && !authCode\n  ? githubAuthRedirect()\n  : ReactDOM.render(<View />, document.querySelector('#root'))\n"]},"metadata":{},"sourceType":"module"}