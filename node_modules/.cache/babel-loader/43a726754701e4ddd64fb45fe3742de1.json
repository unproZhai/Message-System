{"ast":null,"code":"import Chatkit from '@pusher/chatkit-client';\nvar credentials = {\n  url: function url(id, token) {\n    return \"https://chatkit-demo-server.herokuapp.com/token?user=\".concat(id, \"&token=\").concat(token);\n  },\n  instanceLocator: 'v1:us1:05f46048-3763-4482-9cfe-51ff327c3f29'\n};\nvar instanceLocator = credentials.instanceLocator,\n    url = credentials.url;\nexport default (function (_ref, _ref2) {\n  var state = _ref.state,\n      actions = _ref.actions;\n  var id = _ref2.id,\n      token = _ref2.token;\n  return new Chatkit.ChatManager({\n    tokenProvider: new Chatkit.TokenProvider({\n      url: url(id, token)\n    }),\n    instanceLocator: instanceLocator,\n    userId: id\n  }).connect({\n    onAddedToRoom: actions.subscribeToRoom,\n    onRemovedFromRoom: actions.removeRoom,\n    onPresenceChanged: actions.setUserPresence\n  }).then(function (user) {\n    // Subscribe to all rooms the user is a member of\n    Promise.all(user.rooms.map(function (room) {\n      return user.subscribeToRoom({\n        roomId: room.id,\n        hooks: {\n          onMessage: actions.addMessage\n        }\n      });\n    })).then(function (rooms) {\n      actions.setUser(user); // Join the first room in the users room list\n\n      user.rooms.length > 0 && actions.joinRoom(user.rooms[0]);\n    });\n  }).catch(function (error) {\n    return console.log('Error on connection', error);\n  });\n});","map":{"version":3,"sources":["/Users/xinshuangzhai/Desktop/Spring2019/CSCI4230/MessageSystem/src/chatkit.js"],"names":["Chatkit","credentials","url","id","token","instanceLocator","state","actions","ChatManager","tokenProvider","TokenProvider","userId","connect","onAddedToRoom","subscribeToRoom","onRemovedFromRoom","removeRoom","onPresenceChanged","setUserPresence","then","user","Promise","all","rooms","map","room","roomId","hooks","onMessage","addMessage","setUser","length","joinRoom","catch","error","console","log"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,wBAApB;AAEA,IAAMC,WAAW,GAAG;AAClBC,EAAAA,GAAG,EAAE,aAACC,EAAD,EAAKC,KAAL;AAAA,0EACqDD,EADrD,oBACiEC,KADjE;AAAA,GADa;AAGlBC,EAAAA,eAAe,EAAE;AAHC,CAApB;IAMQA,e,GAAyBJ,W,CAAzBI,e;IAAiBH,G,GAAQD,W,CAARC,G;AACzB,gBAAe;AAAA,MAAGI,KAAH,QAAGA,KAAH;AAAA,MAAUC,OAAV,QAAUA,OAAV;AAAA,MAAuBJ,EAAvB,SAAuBA,EAAvB;AAAA,MAA2BC,KAA3B,SAA2BA,KAA3B;AAAA,SACb,IAAIJ,OAAO,CAACQ,WAAZ,CAAwB;AACtBC,IAAAA,aAAa,EAAE,IAAIT,OAAO,CAACU,aAAZ,CAA0B;AAAER,MAAAA,GAAG,EAAEA,GAAG,CAACC,EAAD,EAAKC,KAAL;AAAV,KAA1B,CADO;AAEtBC,IAAAA,eAAe,EAAfA,eAFsB;AAGtBM,IAAAA,MAAM,EAAER;AAHc,GAAxB,EAKGS,OALH,CAKW;AACPC,IAAAA,aAAa,EAAEN,OAAO,CAACO,eADhB;AAEPC,IAAAA,iBAAiB,EAAER,OAAO,CAACS,UAFpB;AAGPC,IAAAA,iBAAiB,EAAEV,OAAO,CAACW;AAHpB,GALX,EAUGC,IAVH,CAUQ,UAAAC,IAAI,EAAI;AACZ;AACAC,IAAAA,OAAO,CAACC,GAAR,CACEF,IAAI,CAACG,KAAL,CAAWC,GAAX,CAAe,UAAAC,IAAI;AAAA,aACjBL,IAAI,CAACN,eAAL,CAAqB;AACnBY,QAAAA,MAAM,EAAED,IAAI,CAACtB,EADM;AAEnBwB,QAAAA,KAAK,EAAE;AAAEC,UAAAA,SAAS,EAAErB,OAAO,CAACsB;AAArB;AAFY,OAArB,CADiB;AAAA,KAAnB,CADF,EAOEV,IAPF,CAOO,UAAAI,KAAK,EAAI;AACdhB,MAAAA,OAAO,CAACuB,OAAR,CAAgBV,IAAhB,EADc,CAEd;;AACAA,MAAAA,IAAI,CAACG,KAAL,CAAWQ,MAAX,GAAoB,CAApB,IAAyBxB,OAAO,CAACyB,QAAR,CAAiBZ,IAAI,CAACG,KAAL,CAAW,CAAX,CAAjB,CAAzB;AACD,KAXD;AAYD,GAxBH,EAyBGU,KAzBH,CAyBS,UAAAC,KAAK;AAAA,WAAIC,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCF,KAAnC,CAAJ;AAAA,GAzBd,CADa;AAAA,CAAf","sourcesContent":["import Chatkit from '@pusher/chatkit-client'\n\nconst credentials = {\n  url: (id, token) =>\n    `https://chatkit-demo-server.herokuapp.com/token?user=${id}&token=${token}`,\n  instanceLocator: 'v1:us1:05f46048-3763-4482-9cfe-51ff327c3f29',\n}\n\nconst { instanceLocator, url } = credentials\nexport default ({ state, actions }, { id, token }) =>\n  new Chatkit.ChatManager({\n    tokenProvider: new Chatkit.TokenProvider({ url: url(id, token) }),\n    instanceLocator,\n    userId: id,\n  })\n    .connect({\n      onAddedToRoom: actions.subscribeToRoom,\n      onRemovedFromRoom: actions.removeRoom,\n      onPresenceChanged: actions.setUserPresence,\n    })\n    .then(user => {\n      // Subscribe to all rooms the user is a member of\n      Promise.all(\n        user.rooms.map(room =>\n          user.subscribeToRoom({\n            roomId: room.id,\n            hooks: { onMessage: actions.addMessage },\n          })\n        )\n      ).then(rooms => {\n        actions.setUser(user)\n        // Join the first room in the users room list\n        user.rooms.length > 0 && actions.joinRoom(user.rooms[0])\n      })\n    })\n    .catch(error => console.log('Error on connection', error))\n"]},"metadata":{},"sourceType":"module"}